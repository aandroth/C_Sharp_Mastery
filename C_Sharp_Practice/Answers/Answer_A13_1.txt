using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using System.Text.RegularExpressions;



// Abstract Factory Pattern is a Creational Pattern
// It abstracts the factory that the customer needs to call, making it able to deliver different product variants
// based on who the customer is and what they require
// So here we are just using the AbstractFactory class,
// which is then responsible for calling the creation members in the specific Embla and Enginola classes

// https://sourcemaking.com/design_patterns/abstract_factory/java/1

enum ARCHITECTURE { EMBER, ENGINOLA }

abstract class AbstractFactory
{
    private static EmberToolkitFactory EMBER_TOOLKIT = new EmberToolkitFactory();
    private static EnginolaToolkitFactory ENGINOLA_TOOLKIT = new EnginolaToolkitFactory();

    public static AbstractFactory getFactory(ARCHITECTURE architecture)
    {
        AbstractFactory factory = null;
        switch (architecture)
        {
            case ARCHITECTURE.ENGINOLA:
                factory = ENGINOLA_TOOLKIT;
                break;
            case ARCHITECTURE.EMBER:
                factory = EMBER_TOOLKIT;
                break;
        }
        return factory;
    }

    public abstract CPU CreateCPU();
    public abstract MMU CreateMMU();
}
abstract class CPU { public void Message() { Console.WriteLine("I am a CPU"); } }


abstract class MMU { public void Message() { Console.WriteLine("I am an MMU"); } }


class EmberToolkitFactory : AbstractFactory
{
    class EmberCPU : CPU { }
    class EmberMMU : MMU { }
    public override CPU CreateCPU()
    {
        Console.WriteLine("Creating an Ember CPU");
        return new EmberCPU();
    }
    public override MMU CreateMMU()
    {
        Console.WriteLine("Creating an Ember MMU");
        return new EmberMMU();
    }
}

class EnginolaToolkitFactory : AbstractFactory
{
    class EnginolaCPU : CPU { }
    class EnginolaMMU : MMU { }
    public override CPU CreateCPU()
    {
        Console.WriteLine("Creating an Enginola CPU");
        return new EnginolaCPU();
    }
    public override MMU CreateMMU()
    {
        Console.WriteLine("Creating an Enginola MMU");
        return new EnginolaMMU();
    }
}


class Practice_Problem
{
    public static void Practice_Problem_Main()
    {
        AbstractFactory emberFactory = AbstractFactory.getFactory(ARCHITECTURE.EMBER);
        CPU emberCpu = emberFactory.CreateCPU();
        MMU emberMmu = emberFactory.CreateMMU();
        emberCpu.Message();
        emberMmu.Message();

        AbstractFactory enginolaFactory = AbstractFactory.getFactory(ARCHITECTURE.ENGINOLA);
        CPU enginolaCpu = enginolaFactory.CreateCPU();
        MMU enginolaMmu = enginolaFactory.CreateMMU();
        enginolaCpu.Message();
        enginolaMmu.Message();
    }
}