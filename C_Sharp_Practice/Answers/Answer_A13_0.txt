using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using System.Text.RegularExpressions;


// Factory Method Pattern is a Creational Pattern
// In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without 
// having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, 
// or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.

// https://sourcemaking.com/design_patterns/factory_method/java/1

abstract class ComputerChip { public bool isPluggedIn = false; public void StatusMessage() { Console.WriteLine("I am " + (isPluggedIn ? "" : "not") + " pluggedIn in"); } }


class EmberToolkitFactory
{
    public class EmberCPU : ComputerChip { public void Message() { Console.WriteLine("I am an Ember CPU"); } }
    public class EmberMMU : ComputerChip { public void Message() { Console.WriteLine("I am an Ember MMU"); } }
    public EmberCPU CreateCPU()
    {
        Console.WriteLine("Creating an Ember CPU");
        return new EmberCPU();
    }
    public EmberMMU CreateMMU()
    {
        Console.WriteLine("Creating an Ember MMU");
        return new EmberMMU();
    }
}


class Practice_Problem
{
    public static void Practice_Problem_Main()
    {
        EmberToolkitFactory emberFactory = new EmberToolkitFactory();
        EmberToolkitFactory.EmberCPU emberCpu = emberFactory.CreateCPU();
        EmberToolkitFactory.EmberMMU emberMmu = emberFactory.CreateMMU();
        emberCpu.Message();
        emberMmu.Message();
    }
}